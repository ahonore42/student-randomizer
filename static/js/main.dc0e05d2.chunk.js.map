{"version":3,"sources":["Main.js","SEIR713.js","App.js","serviceWorker.js","index.js"],"names":["Main","map","cohort","temp","key","to","SEIR713","students","className","onClick","e","preventDefault","randNum","Math","round","random","length","document","querySelector","innerText","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAmBeA,MAhBf,WAGE,OACE,oCACE,8CACA,4BALU,CAAC,YAMAC,KAAI,SAAAC,GACX,IAAIC,EAAI,WAAOD,GACf,OAAO,wBAAIE,IAAKF,GAAQ,kBAAC,IAAD,CAAMG,GAAIF,GAAOD,UCmCpCI,MA7Cf,WACE,IAAIC,EAAW,CACb,QACA,QACA,SACA,QACA,OACA,UACA,UACA,WACA,QACA,SACA,QACA,SACA,SACA,MACA,QACA,UACA,SACA,OACA,WACA,WACA,UACA,QACA,OACA,SACA,SASF,OACE,oCACE,yBAAKC,UAAU,mBACb,4BAAQC,QAVd,SAAiBC,GACfA,EAAEC,iBACF,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWR,EAASS,QAClDC,SAASC,cAAc,YAAYC,UAAYZ,EAASK,KAOpD,0BAEF,yBAAKJ,UAAU,cCrBNY,MAdf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KACE,kDACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,YAAYC,UAAWhB,IACnC,kBAAC,IAAD,CAAOe,KAAK,IAAIC,UAAWtB,QCFjBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc0e05d2.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom';\n\nfunction Main() {\n  let cohorts = ['SEIR-713']\n\n  return (\n    <>\n      <h2>Pick a cohort:</h2>\n      <ul>\n        {cohorts.map(cohort => {\n          let temp = `/${cohort}`\n          return <li key={cohort}><Link to={temp}>{cohort}</Link></li>\n        })}\n      </ul>\n    </>\n  )\n}\n\nexport default Main;","import React from 'react'\n\nfunction SEIR713() {\n  let students = [\n    \"Levin\",\n    \"Shane\",\n    \"Martin\",\n    \"David\",\n    \"Josh\",\n    \"Branden\",\n    \"Anthony\",\n    \"Margaret\",\n    \"Alice\",\n    \"Elaine\",\n    \"Sameh\",\n    \"Barent\",\n    \"Tanner\",\n    \"Han\",\n    \"Alpha\",\n    \"Channee\",\n    \"Steven\",\n    \"Yoel\",\n    \"Cristina\",\n    \"Nicholas\",\n    \"Subrata\",\n    \"Rohun\",\n    \"Lizz\",\n    \"Philip\",\n    \"Irene\"\n  ]\n  function pickStu(e) {\n    e.preventDefault()\n    let randNum = Math.round(Math.random() * students.length)\n    document.querySelector(\".randStu\").innerText = students[randNum]\n    return\n  }\n\n  return (\n    <>\n      <div className=\"buttonContainer\">\n        <button onClick={pickStu}>Get a random student!</button>\n      </div>\n      <div className=\"randStu\"></div>\n    </>\n  )\n}\n\nexport default SEIR713;","import React from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport './style.css';\nimport Main from './Main';\nimport SEIR713 from './SEIR713';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <h1>Student Randomizer</h1>\n        <Switch>\n          <Route path=\"/SEIR-713\" component={SEIR713} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}